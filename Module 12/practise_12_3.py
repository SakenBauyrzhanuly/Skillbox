# Чтобы реализовать класс MyDict, который будет работать точно так же, как и обычный словарь,
# но будет возвращать 0 вместо None при вызове метода get, можно унаследоваться от класса dict и переопределить метод get:
#
# В данном коде мы создаем класс MyDict, который наследуется от встроенного класса dict.
# Мы переопределяем метод get, передавая ему два аргумента: ключ и значение по умолчанию (в нашем случае 0).
# Затем мы вызываем метод get базового класса с помощью функции super() и передаем ему ключ и значение по умолчанию.
#
# Теперь мы можем создавать объекты класса MyDict и использовать их точно так же, как и обычные словари,
# но метод get будет возвращать 0 вместо None, если ключа в словаре нет:dkh


a = dict()
b = {'Tes1t': '!!!!!!!!!'}

print(b.get('Test'))


class NewDict(dict):
    def get(self, key, default=0):
        return super().get(key, default)




# print(type(a))
# print(type(b))

b = NewDict()
b['Test'] = 1
print(b.get('Test'))
